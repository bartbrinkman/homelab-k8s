apiVersion: apps/v1
kind: Deployment
metadata:
  name: geth-miner
  namespace: ethereum
  labels:
    app.kubernetes.io/name: geth-miner
spec:
  replicas: 3
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geth-miner
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geth-miner
    spec:
      containers:
        - name: geth
          image: ethereum/client-go:release-1.10
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args:
            - "-c"
            - "geth"
            - "--bootnodes=`cat /root/.ethereum/bootnodes`"
            - "--nat extip:$(POD_IP)" 
            - "--networkid {{ int .Values.chainId }}"
            - "--mine"
          ports:
            - name: discovery-udp
              containerPort: 30303
              protocol: UDP
            - name: discovery-tcp
              containerPort: 30303
          volumeMounts:
            - name: data
              mountPath: /root/.ethereum
          resources:
            limits:
              cpu: "0.1"
            requests:
              cpu: "0"
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
      initContainers:
        - name: init-genesis
          image: ethereum/client-go:release-1.10
          imagePullPolicy: IfNotPresent
          args:
            - "init"
            - "/var/geth/genesis.json"
          volumeMounts:
            - name: data
              mountPath: /root/.ethereum
            - name: config
              mountPath: /var/geth
        - name: create-account
          image: ethereum/client-go:release-1.10
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args:
            - "-c"
            - "printf '$(PASSWORD)\n$(PASSWORD)\n' | geth account new"
          env:
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geth-miner
                  key: password
          volumeMounts:
            - name: data
              mountPath: /root/.ethereum
        - name: get-bootnodes
          image: ethereum/client-go:release-1.10
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args:
            - "-c"
            - |-
              apk add --no-cache curl; 
              CNT=0;
              echo "retrieving bootnodes from $BOOTNODE_REGISTRAR_SVC"
              while [ $CNT -le 90 ] 
              do
                curl -m 5 -s $BOOTNODE_REGISTRAR_SVC | xargs echo -n >> /geth/bootnodes;
                if [ -s /geth/bootnodes ] 
                then
                  cat /geth/bootnodes;
                  exit 0;
                fi;
                echo "no bootnodes found. retrying $CNT..."; 
                sleep 2 || break;
                CNT=$((CNT+1));
              done;
              echo "WARNING. unable to find bootnodes. continuing but geth may not be able to find any peers.";
              exit 0;
          env: 
            - name: BOOTNODE_REGISTRAR_SVC 
              value: bootnode-registrar 
          volumeMounts: 
            - name: data 
              mountPath: /geth 
      volumes: 
        - name: data 
          emptyDir: {} 
        - name: config 
          configMap: 
            name: geth